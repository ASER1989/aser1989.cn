{"archive":{"blogPosts":[{"id":"/2025/02/17/index","metadata":{"permalink":"/blog/2025/02/17/index","editUrl":"https://www.aser1989.cn/blog/blog/2025-02-17/index.md","source":"@site/blog/2025-02-17/index.md","title":"index","description":"最近用Docusaurus搭了一个个人网站，部署后看到浏览器地址栏上“不安全”三个字感觉特别辣眼，便不由自主的想起了HTTPS。回忆起自己在日常开发中遇到的一些与HTTPS相关的知识，忍不住想将这些年积累的一些细节和心得体会整理一下。","date":"2025-02-17T00:00:00.000Z","tags":[],"readingTime":7.65,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"nextItem":{"title":"再谈Redux","permalink":"/blog/redux"}},"content":"最近用`Docusaurus`搭了一个个人网站，部署后看到浏览器地址栏上“不安全”三个字感觉特别辣眼，便不由自主的想起了`HTTPS`。回忆起自己在日常开发中遇到的一些与`HTTPS`相关的知识，忍不住想将这些年积累的一些细节和心得体会整理一下。\n\n## 为什么要使用HTTPS\n\nHTTPS的发展历程是一段颇具趣味的历史，充满了技术创新与安全挑战。作为前端开发者为什么要使用`HTTPS`，难道`HTTP`不能用了吗？当然不是，从本质上讲`HTTPS`还是`HTTP`，对我们前端开发而言大多数情况下根本就不需要考虑是不是要使用`HTTPS`，`HTTPS`主要针对安全有要求的内容。然而，安全问题由来已久，许多前端功能和浏览器的安全策略都依赖 `HTTPS` 来确保用户的安全和隐私。而我自己对以下内容印象较为深刻：\n<div style=\"padding: 10px;border: solid 1px #c0c0c0;border-radius:5px;color:#333;background:#f9f9f9\">\n\n#### HTTP2\n\nHTTP2是基于`HTTPS`实现的，所以要启用HTTP2就必须使用`HTTPS`。HTTP2给人影响最深刻的一定是**多路复用**，它允许在同一个连接上并发发送多个请求和响应，不会像 HTTP/1.x 那样每个请求需要建立新的连接，完美解决浏览器并发的限制问题（记得以前处理这个问题的时候还是参考百度，用多个域名固定资源的方法来提升并发数量）。如果说某一天领导说我们的网站要把协议升级到HTTP2，前端的同学一定要淡定，因为这几乎不会涉及到代码的修改，HTTP这个协议是给浏览器和服务器使用的，只要我们的服务端和浏览器都支持HTTP2，那这个功能就完成了。\n\n#### Service Worker\n\nService Worker 允许 Web 应用在后台独立工作，我们可以通过它执行耗时计算、缓存资源、处理离线请求等。但由于它涉及到后台操作和缓存用户的数据，浏览器要求它只能在 `HTTPS` 环境下运行,这是为了避免恶意脚本的注入和保障用户数据的安全。\n\n#### Web Authentication API（WebAuthn）\n\n这个功能我并没真正的使用过，它是一种基于公钥的身份验证方式，在我们的移动端应用中，如果希望提供快捷的登陆方式比如指纹、面部识别等就可以通过这个API来实现。由于它涉及到敏感的身份信息，WebAuthn 需要在 `HTTPS` 环境下运行，以确保身份验证过程中的数据不会被窃取或篡改。\n\n#### Geolocation API\n\n如果需要通过浏览器获取用户的地理位置，浏览器会要求该请求通过 `HTTPS` 进行。这样可以确保用户的地理位置信息在传输过程中不会被第三方窃取或篡改。\n\n#### Clipboard\nClipboard API 允许我们在网页中读取或写入剪贴板的内容，实现剪切、复制和粘贴功能。但由于剪贴板中可能包含用户的敏感信息，浏览器要求这个功能只能在 `HTTPS` 环境下运行。\n\n#### Notifications API\nNotifications API 允许 Web 应用在用户的设备上显示通知。它通常用于提醒用户一些重要的事件、消息或更新，尤其是在用户没有打开应用的情况下。与传统的桌面应用通知相似，Web 应用也可以通过通知向用户传递信息。目前，这已经是一个比较常见的功能，这个功能也只能在 `HTTPS` 环境下运行。\n\n</div>\n\n除以上功能外，还有很多功能也需要在`HTTPS`环境下运行，比如：摄像头、麦克风、蓝牙等。\n\n日常工作中也偶尔听同事们说起遇到的一些奇葩问题，最后是使用`HTTPS`解决的。我自己也遇到过一次，我们的项目中使用CORS实现跨域通信，这是一个我们熟悉的解决方案。然而，最终在上线时却遇到了一些意外情况，有个功能在实际使用中频繁出现跨域问题。经过一番排查，我们发现这个功能中有一个接口的URL是以`/`结尾的，大致长这样：http://api.example.com/d/history/ 。虽然 URL 看起来并不特别引人注意，但实际调用时却出现了异常响应。大约有 20% 的概率可以正常响应，而其余情况下，接口返回的却是一段`HTML`代码，我们约定的接口返回格式应该是`JSON`。一位经验丰富的老大哥迅速给出了最佳解决方案：切换到`HTTPS`。在实际开发过程中使用`HTTPS`确实可以规避掉一些问题。\n\n## 证书\n\n使用`HTTPS`不可避免的要用到安全证书，怎么获得免费证书呢？以前都是在阿里云上直接领一个，但这次找了好久都没找到这个功能的入口。后来果断加了一个`Caddy`做代理，使用下来感觉基础代理配置方面比`Nginx`简单很多，并且它默认使用 [Let's Encrypt](https://letsencrypt.org/)（Let's Encrypt是一个免费的证书颁发机构）提供的证书来为网站启用 `HTTPS`。`Caddy`提供了简单、自动化的证书颁发和续期服务。当然，如果你的网站是一个大型的商业网站，那么建议还是购买一个收费的证书，毕竟免费的东西总是有一些限制的。\n\n## 结语\n\n随着技术的不断发展，越来越多的 API 被引入到浏览器中，其中许多涉及隐私和数据安全的功能都要求在`HTTPS`环境下运行。对于前端开发者来说，`HTTPS`不再只是一个协议，更是一种安全意识，它已经成为每个开发者必须掌握的基础知识。"},{"id":"redux","metadata":{"permalink":"/blog/redux","editUrl":"https://www.aser1989.cn/blog/blog/2025-01-14/index.md","source":"@site/blog/2025-01-14/index.md","title":"再谈Redux","description":"2025年再聊前端状态管理似乎是一件不必要的事，毕竟相关文章已堆积得如山如海。但在这些文章或视频内容中，我并没有找到自己喜欢的方案，准确的说是使用方式。所以这篇文章不做技术分析，主要聊聊个人对状态管理的理解，并分享独特的redux使用的方式。","date":"2025-01-14T00:00:00.000Z","tags":[{"inline":false,"label":"redux","permalink":"/blog/tags/redux","description":"redux's tag"}],"readingTime":7.86,"hasTruncateMarker":false,"authors":[{"name":"xu.huang","title":"Front End Engineer","url":"https://github.com/aser1989","page":{"permalink":"/blog/authors/xu"},"socials":{"github":"https://github.com/aser1989"},"imageURL":"https://avatars.githubusercontent.com/u/12827139?s=96&v=4","key":"xu"}],"frontMatter":{"slug":"redux","title":"再谈Redux","authors":["xu"],"tags":["redux"]},"unlisted":false,"prevItem":{"title":"index","permalink":"/blog/2025/02/17/index"}},"content":"2025年再聊前端状态管理似乎是一件不必要的事，毕竟相关文章已堆积得如山如海。但在这些文章或视频内容中，我并没有找到自己喜欢的方案，准确的说是使用方式。所以这篇文章不做技术分析，主要聊聊个人对状态管理的理解，并分享独特的redux使用的方式。\n\n## 状态管理\n\n先分享一个有趣的现象。或许是小厂的缘故，经常会在一些项目中看到vuex的身影，憋屈的是它经常会被用来存用户相关的数据，并且是只存当前登陆用户的相关信息，或者再存些权限、菜单数据。经手过的项目中用到状态管理的地方其实并不多，所以很多时候也没有太在意，毕竟用是挺好用的，但写起来还是不如组件状态那么简单。直到项目上用了React，并大范围使用redux后我对状态管理有了全新，确切的说是比较正确的认知。为了描述它，我专门画了张草图：\n![组件结构示意图](img_1.png)\n\n图上是一个令人痛苦的需求，点击“按钮2”点时候要将外层的“按钮1”设置为禁用状态。要求并不高，痛苦的地方在于他们间隔着好几层的嵌套（现实可能会更残酷些），如果通过事件传递，那么就涉及到所有隔着的组件调整，让它们帮忙传递这个事件。不难，但有点烦。当然，也可以换个思路，比如添加一个全局的事件管理程序，在“按钮1”所在的组件订阅一个事件，事件触发后禁用“按钮1”。当然还有很多类似的方式，如react context等。这个时候我们如果冷静的想想，控制按钮禁用的其实是一个属性，在组件中应该对应一个状态（比如：isDisable=true），如果“按钮2”点击后可以直接修改这个状态，好像会简单很多。这应该就是状态管理最基本的用法。为了方便理解，我还专门画了一张草图：\n\n![状态管理示意图](img_2.png)\n\n大概就这意思吧，状态管理就是将组件状态统一管理，方便组件间状态共享。状态管理是一个非常科学的设计，不仅能降低代码复杂度，还能降低组件的耦合程度。在复杂的场景下，结合中间件可以轻易的解决很多令人头疼的需求，高效、简洁，当然最重要的还是优雅！\n\n这么好的设计为什么我就不常见呢？除了厂小的缘故，使用复杂应该是最大的障碍。遥记得java ssh架构下写一个接口需要修改很多个配置文件！好用的Redux早期管理一个状态至少也要改三个文件（action、reducer、selector），甚至更多，后来用上redux toolkit后也就少写一个action。\n\n## @nebula-note/redux-hooks\n\n出于对编码工作的热爱，最近在写一个自己的代码笔记工具 Nebula Note，React技术栈，状态管理还是熟悉的Redux。Redux中Function Component组件化成本极低，所以我在使用React的时候几乎已完全放弃Class Component。开始并没考虑使用状态管理，但由于组件粒度越来越小，最后还是绷不住用上了。开始是reduxjs/toolkit，后来越写越觉得复杂，最后基于对Redux的熟悉，写了  [@nebula-note/redux-hooks](https://github.com/ASER1989/redux-hooks)，目的是像使用hooks一样使用redux，所以将这个hooks命名useRedux。这里以最小的篇幅介绍下这个库的使用。\n\n#### 配置Store\nRedux使用前需要做一些简单的配置，越简单的使用，配置就越简单，且这事只干一次。[@nebula-note/redux-hooks](https://github.com/ASER1989/redux-hooks)是基于redux toolkit封装的，所以使用配置和redux toolkit完全一致。只不过configureStore这个函数需要从[@nebula-note/redux-hooks](https://github.com/ASER1989/redux-hooks)中导入。下面是相关代码：\n``` ts\nimport { configureStore } from '@nebula-note/redux-hooks';\nconst store = configureStore();\n```\n#### 使用hooks管理状态\n下面是一个极度简单的使用案例，完整的。\n```ts\nimport { useRedux } from '@nebula-note/redux-hooks';\n\ntype ExampleState = {\n    isDisabled:boolean\n}\n\nexport const ExampleA = () => {\n     const { state, setState } = useRedux<ExampleState>('reduxKeyName', {isDisabled:false});\n     \n     const handleDisabled= () => {\n        setState(true);\n     }\n        \n     return(\n        <div>\n            <button disabled={state.isDisabled}>按钮1</button>\n          \n            <button onclick={handleDisabled}>按钮2</button>\n        </div>\n     )\n}\n\nexport const ExampleB = () => {\n     const { setState } = useRedux<ExampleState>('reduxKeyName', {isDisabled:false});\n     \n     const handleDisabled= () => {\n        setState(true);\n     }\n        \n     return(\n            <button onclick={handleDisabled}>按钮2</button>\n     )\n}\n```\n\n值得开心的是使用[@nebula-note/redux-hooks](https://github.com/ASER1989/redux-hooks)后不再需要编写reducer和action，useRedux会自动创建set和update两个action及reducer，使用中主要是应用这两个action去设置或更新状态，对应的是hooks暴露的两个函数，setState，updateState。setState是完全使用给定值，updateState则不需要提供完整的状态对象，如状态中存储的是`{name, age}`,如果只想更新age，那么只需要传入age就可以了`updateState({age:10})`。\n\n兼容方面[@nebula-note/redux-hooks](https://github.com/ASER1989/redux-hooks)完全兼容redux toolkit，因为早期的时候项目中使用的是redux toolkit，所以重构也不是一次性完成的，因此并不用担心[@nebula-note/redux-hooks](https://github.com/ASER1989/redux-hooks)的引入会对历史代码造成影响。如果需要使用想saga这样的中间件，还是需要自己定义action，[@nebula-note/redux-hooks](https://github.com/ASER1989/redux-hooks)只是一个针对状态的轻量级解决方案。\n\n关于共享状态，useRedux第一个参数是redux的状态名称，所以只要状态名相同，在任何地方使用useRedux都能获取或修改这个状态数据。useRedux的第二个参数是状态默认值，这个值只会在状态数据初始化之前有效。\n\n## 最后\n引入状态管理后代码逻辑变得更清晰，使用[@nebula-note/redux-hooks](https://github.com/ASER1989/redux-hooks)后代码变得更简洁。[@nebula-note/redux-hooks](https://github.com/ASER1989/redux-hooks)已发布到[npm](https://www.npmjs.com/package/@nebula-note/redux-hooks)和[github](https://github.com/ASER1989/redux-hooks)上。目前的设计完全是基于自己的需求在做，后续的更新中应该会加入一些新内容，但范围不会太大应该还是只针对基础状态管理。以上便是我对状态管理的理解，以及Redux使用的分享，喜欢请记得点赞。"}]}}